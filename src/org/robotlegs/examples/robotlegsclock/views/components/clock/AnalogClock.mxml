<?xml version="1.0" encoding="utf-8"?>
<!--
	 /**
	 * Copyright (c) 2010 the original author or authors
	 *  Permission is hereby granted to use, modify, and distribute this file
	 * in accordance with the terms of the license agreement accompanying it.
	 **/
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:clock="org.robotlegs.examples.robotlegsclock.views.components.clock.*"
		 creationComplete="buildClock()">
	<fx:Script>
		<![CDATA[
			import org.robotlegs.examples.robotlegsclock.models.vos.ClocksStyleVO;
			import org.robotlegs.examples.robotlegsclock.utils.GeometryUtils;

			[Bindable]
			public var clocksStyleVO:ClocksStyleVO=new ClocksStyleVO();
			protected var clocksRectangle:Rectangle;

			public function buildClock():void
			{
				clocksRectangle=new Rectangle(this.width / 2, this.height / 2, this.width, this.height);
				positionClocksElements();
			}

			protected function positionClocksElements():void
			{
				clocksLegs.scaleX=clocksLegs.scaleY=(1.50 * this.height) / 1000;
				clocksLegs.top=+(clocksLegs.scaleX * clocksLegs.height);
				clocksLegs.left=clocksRectangle.x * clocksLegs.scaleX;

				calculateCirclesPosition("backgroundCircle", 100);
				calculateCirclesPosition("middleCircle", 8.3);
				calculateCirclesPosition("littleCicle", 3);
				positionDials(90);
				if (clocksStyleVO.showClocksLogo)
				{
					clocksLogo.clocksRectangle=clocksRectangle;
					clocksLogo.drawClocksLogo();
					clocksLogoBackground.clocksRectangle=clocksRectangle;
					clocksLogoBackground.drawClocksLogoBackground();
				}
				clocksHands.clocksRectangle=clocksRectangle;
				clocksHands.timeZoneOffset=0;
				clocksHands.startTicking();
			}

			private function calculateCirclesPosition(groupElement:String, percent:Number):void
			{
				this[groupElement].ellipseWidth=GeometryUtils.percentualValue(clocksRectangle.width, percent);
				this[groupElement].ellipseHeight=GeometryUtils.percentualValue(clocksRectangle.height, percent);
				this[groupElement].x=clocksRectangle.x - this[groupElement].ellipseWidth / 2;
				this[groupElement].y=clocksRectangle.y - this[groupElement].ellipseHeight / 2;
			}

			private function positionDials(percent:Number):void
			{
				clocksDials.width=GeometryUtils.percentualValue(clocksRectangle.width, percent);
				clocksDials.height=GeometryUtils.percentualValue(clocksRectangle.height, percent);
				clocksDials.x=clocksRectangle.x;
				clocksDials.y=clocksRectangle.y;
				clocksDials.initDials();
			}

			public function changeClocksStyles():void
			{
				this.scaleX=clocksStyleVO.resizeClock / 100;
				this.scaleY=clocksStyleVO.resizeClock / 100;
				clocksDials.clocksStyleVO=clocksStyleVO;
				clocksDials.redoClocksDials();
				clocksHands.clocksStyleVO=clocksStyleVO;
				clocksHands.redoClocksHands();
				clocksLogo.clocksStyleVO=clocksStyleVO;
				clocksLogo.redoClocksLogo();
				clocksLogoBackground.clocksStyleVO=clocksStyleVO;
				clocksLogoBackground.redoClocksLogoBackground();
			}

			public function changeTimeZone(val:Number):void
			{
				clocksHands.timeZoneOffset=val;
				clocksHands.restartTicking();
			}
		]]>
	</fx:Script>
	<clock:ClocksLegs id="clocksLegs"
					  visible="{clocksStyleVO.showLegs}"/>
	<s:Group id="analogClock"
			 width="100%"
			 height="100%">
		<clock:ClocksLogoBackground id="clocksLogoBackground"
									clocksStyleVO="{clocksStyleVO}"/>
		<clock:ClocksLogo id="clocksLogo"
						  clocksStyleVO="{clocksStyleVO}"/>
		<clock:ClocksCircle id="backgroundCircle"
							gradientColor="{clocksStyleVO.darkColor}"
							strokeColor="{clocksStyleVO.shadowColor}"
							gradientAlpha=".8"/>
		<clock:ClocksDials id="clocksDials"
						   clocksStyleVO="{clocksStyleVO}"/>
		<clock:ClocksCircle id="middleCircle"
							gradientColor="{clocksStyleVO.lightColor}"
							strokeColor="{clocksStyleVO.lightColor}"
							gradientAlpha=".7"/>
		<clock:ClocksHands id="clocksHands"
						   width="100%"
						   height="100%"
						   clocksStyleVO="{clocksStyleVO}"/>
		<clock:ClocksCircle id="littleCicle"
							gradientColor="{clocksStyleVO.accentColor}"
							strokeColor="{clocksStyleVO.lightColor}"/>
	</s:Group>
</s:Group>
